DECLARE PLUGIN "coq-simple-io.plugin"

{
open Stdarg
open IOLib

let run_ast = mk_ref "SimpleIO.IO_Monad.IO.unsafe_run'"

let run ~opaque_access c =
  Feedback.msg_info (Pp.str ("Running " ^ string_of_constr_expr c ^ " ..."));
  run ~plugin_name:"coq_simple_io" ~opaque_access
    (CAst.make @@ apply_constr run_ast [c])

let string_unopt = function
  | None -> ""
  | Some s -> s
}

VERNAC COMMAND EXTEND RunIO CLASSIFIED AS SIDEFF
  | ![opaque_access] ["RunIO" constr(c)] -> {run c}
  | ["RunIO" "Include" string(s)] -> { add_extra_dir s }
  | ["RunIO" "Open" string(s)] -> { add_module_to_open s }
  | ["RunIO" "Package" string(s)] -> { add_extra_pkg s }
  | ["RunIO" "Builder" "Ocamlfind" string_opt(opts)] -> { set_builder (Ocamlfind (string_unopt opts)) }
  | ["RunIO" "Builder" "Ocamlbuild" string_opt(opts)] -> { set_builder (Ocamlbuild (string_unopt opts))}
  | ["RunIO" "Builder" "Dune" string(s) string_opt(opts)] -> { set_builder (Dune (s, string_unopt opts)) }
  | ["RunIO" "Smart" "On"] -> { smart_mode := true }
  | ["RunIO" "Smart" "Off"] -> { smart_mode := false }
  | ["RunIO" "Reset"] -> { IOLib.reset () }
END
