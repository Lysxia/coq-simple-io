(** * Operations on file names *)

From SimpleIO Require Import
     IO_Monad
     IO_Stdlib.

Module OFilename.

(** The conventional name for the current directory (e.g. [.] in Unix). *)
Parameter current_dir_name : ocaml_string.

(** The conventional name for the parent of the current directory
   (e.g. [..] in Unix). *)
Parameter parent_dir_name : ocaml_string.

(** The directory separator (e.g. [/] in Unix). *)
Parameter dir_sep : ocaml_string.

(** [concat dir file] returns a file name that designates file
   [file] in directory [dir]. *)
Parameter concat : ocaml_string -> ocaml_string -> ocaml_string.

(** Return [true] if the file name is relative to the current
   directory, [false] if it is absolute (i.e. in Unix, starts
   with [/]). *)
Parameter is_relative : ocaml_string -> bool.

(** Return [true] if the file name is relative and does not start
   with an explicit reference to the current directory ([./] or
   [../] in Unix), [false] if it starts with an explicit reference
   to the root directory or the current directory. *)
Parameter is_implicit : ocaml_string -> bool.

(** [check_suffix name suff] returns [true] if the filename [name]
    ends with the suffix [suff].
    Under Windows ports (including Cygwin), comparison is
    case-insensitive, relying on [String.lowercase_ascii].  Note that
    this does not match exactly the interpretation of case-insensitive
    filename equivalence from Windows.  *)
Parameter check_suffix : ocaml_string -> ocaml_string -> bool.

(** [chop_suffix name suff] removes the suffix [suff] from
    the filename [name].
    @raise Invalid_argument if [name] does not end with the suffix [suff].
 *)
Parameter chop_suffix : ocaml_string -> ocaml_string -> IO ocaml_string.

(** [extension name] is the shortest suffix [ext] of [name0] where:
    - [name0] is the longest suffix of [name] that does not
      contain a directory separator;
    - [ext] starts with a period;
    - [ext] is preceded by at least one non-period character
      in [name0].
    If such a suffix does not exist, [extension name] is the empty
    string.
*)
Parameter extension : ocaml_string -> ocaml_string.

(** Return the given file name without its extension, as defined
    in [OFilename.extension]. If the extension is empty, the function
    returns the given file name.
    The following invariant holds for any file name [s]:
    [remove_extension s ++ extension s = s]
*)
Parameter remove_extension : ocaml_string -> ocaml_string.

(** Same as [OFilename.remove_extension], but raise [Invalid_argument]
    if the given name has an empty extension. *)
Parameter chop_extension : ocaml_string -> IO ocaml_string.

(** Split a file name into directory name / base file name.
   If [name] is a valid file name, then [concat (dirname name) (basename name)]
   returns a file name which is equivalent to [name]. Moreover,
   after setting the current directory to [dirname name] (with [OSys.chdir]),
   references to [basename name] (which is a relative file name)
   designate the same file as [name] before the call to [OSys.chdir].
   This function conforms to the specification of POSIX.1-2008 for the
   [basename] utility. *)
Parameter basename : ocaml_string -> ocaml_string.

(** See [OFilename.basename].
   This function conforms to the specification of POSIX.1-2008 for the
   [dirname] utility. *)
Parameter dirname : ocaml_string -> ocaml_string.

(** [temp_file prefix suffix] returns the name of a
   fresh temporary file in the temporary directory.
   The base name of the temporary file is formed by concatenating
   [prefix], then a suitably chosen integer number, then [suffix].
   The temporary file is created empty, with permissions [0o600]
   (readable and writable only by the file owner).  The file is
   guaranteed to be different from any other file that existed when
   [temp_file] was called.
   @raise Sys_error if the file could not be created.
 *)
Parameter temp_file : ocaml_string -> ocaml_string -> IO ocaml_string.

(** Same as [OFilename.temp_file], but returns both the name of a fresh
   temporary file, and an output channel opened (atomically) on
   this file.  This function is more secure than [temp_file]: there
   is no risk that the temporary file will be modified (e.g. replaced
   by a symbolic link) before the program opens it.
   @raise Sys_error if the file could not be opened.
*)
Parameter open_temp_file :
  ocaml_string -> ocaml_string -> IO (ocaml_string * out_channel).

(** The name of the temporary directory:
    Under Unix, the value of the [TMPDIR] environment variable, or "/tmp"
    if the variable is not set.
    Under Windows, the value of the [TEMP] environment variable, or "."
    if the variable is not set.
    The temporary directory can be changed with [OFilename.set_temp_dir_name].
*)
Parameter get_temp_dir_name : IO ocaml_string.

(** Change the temporary directory returned by [OFilename.get_temp_dir_name]
    and used by [OFilename.temp_file] and [OFilename.open_temp_file].
*)
Parameter set_temp_dir_name : ocaml_string -> IO unit.

(** Return a quoted version of a file name, suitable for use as
    one argument in a command line, escaping all meta-characters.
    Warning: under Windows, the output is only suitable for use
    with programs that follow the standard Windows quoting
    conventions.
 *)
Parameter quote : ocaml_string -> ocaml_string.

#if OCAML_VERSION >= (4, 10, 0)
(** [null] is ["/dev/null"] on POSIX and ["NUL"] on Windows. It represents a
    file on the OS that discards all writes and returns end of file on reads.
    @since 4.10.0 *)
Parameter null : ocaml_string.
Extract Constant null => "Filename.null".
#endif

#if OCAML_VERSION >= (4, 8, 0)
(** [chop_suffix_opt suffix filename] removes the suffix from
    the [filename] if possible, or returns [None] if the
    filename does not end with the suffix.
    Under Windows ports (including Cygwin), comparison is
    case-insensitive, relying on [String.lowercase_ascii].  Note that
    this does not match exactly the interpretation of case-insensitive
    filename equivalence from Windows.
    @since 4.08
*)
Parameter chop_suffix_opt: ocaml_string -> ocaml_string -> option ocaml_string.
Extract Constant chop_suffix_opt  => "Filename.chop_suffix_opt".
#endif

(* begin hide *)
Extract Constant current_dir_name => "Filename.current_dir_name".
Extract Constant parent_dir_name  => "Filename.parent_dir_name".
Extract Constant dir_sep          => "Filename.dir_sep".
Extract Constant concat           => "Filename.concat".
Extract Constant is_relative      => "Filename.is_relative".
Extract Constant is_implicit      => "Filename.is_implicit".
Extract Constant check_suffix     => "Filename.check_suffix".
Extract Constant extension        => "Filename.extension".
Extract Constant remove_extension => "Filename.remove_extension".
Extract Constant basename         => "Filename.basename".
Extract Constant dirname          => "Filename.dirname".
Extract Constant quote            => "Filename.quote".

Extract Constant chop_suffix    => "fun s f k -> k (Filename.chop_suffix  s f)".
Extract Constant chop_extension => "fun   f k -> k (Filename.chop_extension f)".
Extract Constant temp_file      => "fun p s k -> k (Filename.temp_file    p s)".
Extract Constant open_temp_file =>
          "fun p s k -> k (Filename.open_temp_file   p s)".
Extract Constant get_temp_dir_name =>
          "fun     k -> k (Filename.get_temp_dir_name ())".
Extract Constant set_temp_dir_name =>
          "fun d   k -> k (Filename.set_temp_dir_name  d)".
(* end hide *)

End OFilename.
